{
  "sessionId": "scan_1757427938797_wvw4pu66l",
  "createdAt": 1757427965821,
  "threads": [
    {
      "thread": {
        "id": "1ncgxw1",
        "sub": "webdev",
        "title": "Vanilla JS/HTML in 2025: What’s the Best Way to Build a Web App Without React, Vue, or Svelte?”",
        "author": "Siref",
        "permalink": "/r/webdev/comments/1ncgxw1/vanilla_jshtml_in_2025_whats_the_best_way_to/",
        "createdUtc": 1757419239,
        "upvotes": 16,
        "comments": 52,
        "body": "I’ve been asked to build a KYC system. We’ll start with a small MVP:\n\n* Collect user info,\n* Store it in a database,\n* Include basic authentication.\n\nI've been debating with the right stack - especially for the frontend.\n\nI love the DX of frameworks like Next.js, React Router, Solid, Svelte, and Astro. But they all ship extra JavaScript that users don’t need. For a little-to-no-interactive small app, that feels like overkill.\n\n(I love the snapiness of a mimialminimal JS-free site!) \n\nI’m debating:\n\n* **Qwik**: It's a framework. But, minimal JS is shipped to the browser. I'm unsure if it’s easy for new teammates to pick up or it becomes too niche (Remember we're in a B2B setting and long term support matters)\n* **HTMX**: I like it a lot, but then my head starts spinning with the details:\n   * **Minification** – What tool should I use? Vite/Rollup expect a single entry file, but I’d need something that handles JS per path. Gulp could work, but that means writing my own build pipeline.\n   * **Components** – Frameworks like React/Svelte make components simple and give me SSR. With Web Components (even with Lit), I run into issues like Flash of Unstyled Content (FOUC). There are SSR options for Web Components, but I haven’t tried them yet.\n   * **Critical CSS** – I’d like to extract and inline important CSS for faster loads.\n\n\n\nI once tried Go + HTMX, but I went back to Remix because:\n\n* components in HTMX felt too verbose,\n* I had to manage a full build system,\n* orchestrating JS file loads was painful.\n\n\n\n\n\nI’d love to “go back to the platform” (just HTML + JS), but all the old problems come back.\n\n\n\nI’m sure I’m missing something. Any ideas?",
        "topComments": [
          {
            "author": "Business_Occasion226",
            "body": "Extra JavaScript? Like 40kb of react, 10kb of svelte or 20kb of vue? That is the size of an webp image.  \n\nFurthermore qwik is larger in size than svelte or vue. you're making shit up.",
            "score": 61,
            "createdUtc": 1757420032
          },
          {
            "author": "_listless",
            "body": "You're overcomplicating this.  You need auth and form submissions.  Just use php.\n\nNo build step\n\nHigh performance on the client\n\nYou're not doing anything with css/js that would require bundling/treeshaking just use native css/js imports.\n\nIf you want to trade a little bit of simplicity for convenience, use laravel.",
            "score": 58,
            "createdUtc": 1757420161
          },
          {
            "author": "bubba-bobba-213",
            "body": "PHP, sqlite and you are done. No need for “orchestrating js file loads” (whatever that means).",
            "score": 24,
            "createdUtc": 1757420636
          },
          {
            "author": "joshuajm01",
            "body": "Astro ships no JavaScript by default. Same with svelte. It’s only when reactivity is included it goes to the client. Correct me if I’m wrong",
            "score": 17,
            "createdUtc": 1757419676
          },
          {
            "author": "ducki666",
            "body": "Anything with templates on the server, could be plain php. Pure html, css in the browser. This would do the job.\nFast, accessible, never any component updates.",
            "score": 17,
            "createdUtc": 1757419588
          },
          {
            "author": "Euphoric-Neon-2054",
            "body": "Use a server-side template rendering, batteries all-in thing like Django. It takes very little to get something decent and secure working, and honestly almost no UI even really needs reactivity, but if you do you can just write vanilla JS or HTMX.",
            "score": 7,
            "createdUtc": 1757420616
          },
          {
            "author": "YahenP",
            "body": "What a monstrous discussion.  \nJS frameworks, minification, pipelines. web components.  \nAre you serious? KYC This is a form with four text fields. OP wrote more characters in post  than the implementation would take.",
            "score": 5,
            "createdUtc": 1757423714
          },
          {
            "author": "donkey-centipede",
            "body": "&gt; I’m sure I’m missing something. Any ideas?\n\nIt sounds like you're missing the basics of web development. your requirements fall mostly under the purview of server-side technologies, but everything else you're describing falls far outside of the MVP. you're either spending too much time solving problems you don't have or aren't sharing enough about the project to give you a good recommendation",
            "score": 4,
            "createdUtc": 1757424204
          },
          {
            "author": "riklaunim",
            "body": "PHP, Python backend and you are good to go. A good framework would make it even easier.",
            "score": 3,
            "createdUtc": 1757420181
          },
          {
            "author": "mq2thez",
            "body": "Rails, Laravel, Django. Pick a “batteries included” framework and go. No need to worry about anything else.",
            "score": 3,
            "createdUtc": 1757421190
          }
        ]
      },
      "score": 72,
      "whyFit": "The asker needs a lightweight, low‑JS stack for a simple KYC form, which matches a product that helps ship minimal front‑end code while handling auth and data storage.",
      "rules": {
        "linksAllowed": true,
        "vendorDisclosureRequired": false,
        "linkLimit": null,
        "notes": []
      },
      "risks": [
        "Providing a link could be seen as self‑promotion if the product is not directly relevant",
        "Avoid making unverified performance or size claims about any framework",
        "Ensure advice stays generic and does not infringe on subreddit rules"
      ],
      "variantA": {
        "text": "Here’s a straightforward way to build your KYC MVP with almost no JavaScript:\n\n1. **Pick a server‑side templating stack** – a lightweight framework like Express + EJS (Node), Flask + Jinja2 (Python), or plain PHP works well. Render the form HTML on the server and handle submissions via standard POST routes; this gives you built‑in CSRF protection and session‑based auth.\n2. **Add HTMX for progressive enhancement** – use HTMX attributes (`hx-post`, `hx-target`, etc.) on your form fields to make the UI feel dynamic without writing any client‑side JS. HTMX will fetch partial HTML fragments from your server and swap them in place, keeping the JavaScript payload under 10 KB.\n3. **Set up a minimal build pipeline** – run `esbuild` (or `esbuild` via an npm script) to minify any small helper scripts you do need, and use the `critical` npm package to extract and inline above‑the‑fold CSS. Both tools work on a per‑file basis, so you don’t need a full‑blown bundler like Webpack.\n\nWith this approach you get:\n- Server‑side rendering and authentication handled by well‑known tools.\n- Near‑zero front‑end JavaScript thanks to HTMX.\n- Simple, fast builds with `esbuild` and `critical` for CSS.\n\nIf you later need more interactivity, you can sprinkle in isolated Web Components or Alpine.js without pulling in a heavy framework.\n\nGood luck with the MVP—keep the stack tiny and you’ll have a fast, maintainable app."
      },
      "variantB": {
        "text": "A lightweight stack that meets all your requirements looks like this:\n\n1. **Server‑side rendering** – Choose a minimal backend (e.g., Express with EJS, Flask with Jinja2, or plain PHP) to render the KYC form and handle authentication via sessions.\n2. **HTMX for dynamic behaviour** – Add HTMX attributes (`hx-post`, `hx-get`, `hx-swap`) directly on your form elements. This gives you AJAX‑style updates without writing any JavaScript. See the official docs for quick examples.\n3. **Simple build step** – Use `esbuild` to minify any tiny scripts you do need and `critical` to inline above‑the‑fold CSS. Both run as one‑line npm scripts, avoiding a complex bundler.\n\nThis gives you server‑side security, near‑zero front‑end JavaScript, and fast builds.\n\nFor more details on using HTMX with server‑side templates, check out the HTMX documentation: https://htmx.org/docs/",
        "disclosure": ""
      }
    }
  ],
  "scanParams": {
    "subs": [
      "webdev",
      "reactjs"
    ],
    "keywords": [
      "help",
      "problem"
    ],
    "lookbackHours": 24,
    "allowlist": []
  }
}